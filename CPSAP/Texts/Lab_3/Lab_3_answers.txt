1. Перечислите основные свойства глобальные объекты Node.js и поясните их предназначение.
  Глобальные объекты:
  1.1 global - глобальный объект в NodeJS. В нем можно хранить перменные и функции, которые могут\
    быть использованы в любом месте приложения. Позволяет делиться переменными между разными модулями приложения
    и не загрязнять каждый модуль переопределением переменных.
    
  1.2 process - объект, представляющий текущий процесс в NodeJS. Предназначен для получение информации о 
    процессе(process.pid - для получения id процесса, например), управления процессом(process.exit() - закрытие процесса),
    обработка событий, связанных с процессами(process.on('exit',callback()) - подписываемся на событие , которое с тригерится,
    когда процесс завершится).
    
  1.3 buffer - глобальный объект для работы с бинарными данными в NodeJS. Предназначен для работы с двоичными(бинарными) данными: набором октетов
  Глобальные компоненты:
  1.4 require - функция для импорта модулей в текущий файл. 
  1.5 module - объект, представляющий текущий модуль. позволяет экспортировать функции и переменные из модуля
  1.6 console - глобальные объект для вывода логов, предупреждений и ошибок. упрощает отладку и предоставляет удобные методы
    для вывода сообщений в консоль

2. Поясните понятие «асинхронная функция».

Асинхронная функция - функция, выполняющаяся в два этапа:
  1) Заявка на выполнение операции
  2)Выполнение операции
 Такая функция, в отличии от синхронной, не будет блокировать поток и приостанавливать выполнение других функций. 
  

3. Поясните понятие стандартные «системные потоки». 
В Node.js стандартные «системные потоки» представляют собой предопределенные интерфейсы для ввода и вывода данных.
Стандартный поток ввода - stdin
Стандартный поток вывода - stdout
Стандартный поток ошибок - stderr


4. Поясните назначение функций process.nextTick, setImmediate, поясните в чем разница.

В Node.js функции process.nextTick и setImmediate используются для планирования выполнения кода в будущем
  4.1 process.nextTick() - Используется для добавления колбэков (функций) в очередь на выполнение, которая обрабатывается перед началом следующего цикла событий.
    Эту функцию обычно применяют для более быстрой обработки операций, которые должны быть выполнены сразу после текущего выполнения, но до любого другого кода, включая процессы I/O.
  4.2 setImmediate() - Используется для планирования выполнения кода в следующем цикле событий, но после всех текущих операций I/O.
    Эта функция обычно применяется для выполнения задач, которые не требуют немедленного выполнения, но должны быть выполнены после завершения текущих операций I/O.
        
Разница между ними главным образом - в порядке выполнения, так как у process.nextTick() - наивысший приоритет, а у setImmediate() - приоритет второй с конца(очередь проверки).