1. Дайте определение понятию «Интернет».
Интернет - Всемирная компьютерная сеть, построенная на основе стека протоколов TCP/IP.
Интернет: 
1)	сеть TCP/IP;
2)	службы Internet;
3)	организации, поддерживающие работоспособность и развитие Internet;
4)	документация (RFC, STD).

2. Дайте определение понятию «Служба Интернет».
Internet-служба:  другое название Internet-сервис - 
один из видов Internet-ресурса, имеющий специальное назначение (DNS, WWW, E-mail, FTP, ICQ, Telnet)

3. Дайте определение понятию «Узел сети Интернет»
узел Интернет: устройство, имеющее IP-адрес и подключенное сети Интернет 
(обычно к сети Интернет-провайдера). Каждый узел характеризуется своей программно-аппаратной платформой – аппаратурой и операционной системой

4. Дайте определение понятию «клиент-серверное приложение». 
клиент-серверное приложение = приложение (программа) с клиент-серверной архитектурой: приложение, состоящее из двух компонент – клиента и сервера; 
клиент и сервер взаимодействуют между собой в соответствии с заданными правилами (спецификациями, протоколами);
для взаимодействия между клиентом и сервером в соответствии с правилами (спецификацией, протоколом) должно быть установлено соединение; 
инициатором соединения всегда является клиент.  
 
5. Дайте определение понятию «сетевой протокол». 
Сетевой протокол — это набор правил, который обеспечивает связь между устройствами в сети

6. Перечислите основные свойства протокола HTTP.
HTTP: основные свойства 
-	версии HTTP/1.1 – действующий (текстовый), HTTP/2 – черновой (не распространен, бинарный); 
-	два типа абонентов: клиент и сервер;
-	два типа сообщений: request и response;
-	от клиента к серверу – request;
-	от сервера к клиенту – response;
-	на один request всегда один response, иначе ошибка;
-	одному response всегда один request,  иначе ошибка; 
-	TCP-порты: 80, 443;
-	для адресации используется URI или URN;
-	поддерживается W3C, описан в нескольких RFC.



7. Перечислите состав информации, пересылаемой в HTTP-запросе.  

Request:
- метод;
- URI;
- версия протокола (HTTP/1.1);
- заголовки (пары: имя/заголовок) – передаётся по умолчанию; 
(Заголовки — это дополнительные данные, которые передаются вместе с запросом. Они помогают серверу понять, как обрабатывать запрос)

- параметры (пары: имя/заголовок) – передаётся разработчиком 
(Параметры — это данные, которые вы хотите отправить на сервер в своем запросе. Их передает разработчик. Часто они используются в запросах типа GET или POST);
- расширение(.aspx,.php,.html …)  -указывает, в каком формате находится ресурс.
- Тело запроса(Это часть запроса, содержащая данные, которые вы отправляете на сервер. Оно используется в методах, таких как POST)



8. Перечислите состав информации, пересылаемой в HTTP-ответе.  
1. Response:
-	версия протокола (HTTP/1.1);
-	код состояния (1xx, 2xx, 3xx, 4xx, 5xx);
-	пояснение к коду состояния;
-	заголовки (пары: имя/заголовок)- Заголовки содержат дополнительную информацию о содержимом ответа и его обработке.
Примеры заголовков:
-	Content-Type: Указывает тип возвращаемых данных (например, text/html для HTML-страниц или application/json для JSON-данных).
-	Content-Length: Указывает размер ответа в байтах.
-	Set-Cookie: Используется для установки файлов cookie в браузере.

-	Расширение - Это часть имени файла, указывающая на тип возвращаемого контента..
-	Тело ответа - Это основная часть ответа, которая содержит данные, отправляемые сервером.


9. Дайте определение понятию «web-приложение». 
Приложение с клиент-серверной архитектурой, где клиент и сервер взаимодействуют между собой по протоколу HTTP

10. Дайте определение понятиям  «frontend» и «backend». 

frontend - то, что видит клиент, клиентская часть приложения.
backend - серверное ПО

11. Дайте определение понятию «кроссплатформенное приложение». 
кроссплатформенное приложение: приложение, способное работать 
на более чем одной программно-аппаратной (аппаратура + операционная система) платформе. 
 Кроссплатформенность может быть достигнута различными способами:
  1) на уровне компилятора (С, С++);
 2) на уровне среды (фреймворка) исполнения (Java/JVM, C#/.NET CORE, JS/Node.js/V8).    
 
 
12. Изобразите и поясните общую схему web-приложения.

client <---HTTP---> server


13. Назовите основные технологии разработки серверных кроссплатформенных приложений.
технологии для разработки кроссплатформенных web-серверов:
- PHP/Apache, LAMP;
- Java/JVM/Application Server;
- C#/ASP.NET CORE;
- Python/Django;
- Ruby on Rails;
- JS/Node.js, ….


14. Поясните понятие «асинхронная операция».

операция называется асинхронной, если ее выполнение  осуществляется в 2 фазы:
 1) заявка на исполнение; 2) получение результата; при этом участвуют два механизма: 
 A-механизм, формирующий заявку и потом  получающий результат; B-механизм, получающий заявку от A, 
 исполняющий операцию и отправляющий результат A; продолжительность исполнения операции B-механизмом, как правило, непредсказуемо; 
 в то время пока B-механизм исполняет операцию, А-механизм выполняет собственную работу. Применение асинхронности не противоречит применению многопоточности.
 
 
 
 
15. Поясните принцип выполнения асинхронного запроса с помощью объекта   XMLHTTPRequest и Fetch. 
        xhr.open('GET','http://localhost:5000/api/name',true);
        xhr.onreadystatechange = function(){
            if(xhr.readyState===4&&xhr.status===200){
                document.getElementById('user-data').innerText = xhr.responseText;
            }
        }
        xhr.send();
-------------------------------------------------------------------------------------------------
            fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Response was not OK');
                }
                return response.text();

            })
            .then(data=>{
                document.getElementById('user-data').innerText = data;
            })
            .catch(error => {
                console.log("Error: ", error);
            });
    })

16. Поясните основное назначение сервера NODE.JS.
программная платформа для разработки серверных web-приложений на языке JS/V8.
Обеспечивает выполнение JavaScript-кода на стороне сервера


17. Перечислите основные свойства сервера NODE.JS. 
2.	NODEJS: основные свойства:
  2.1 основан на Chrome V8;
  2.2 среда (контейнер) исполнения приложений на JavaScript;
  2.3 поддерживает механизм асинхронности;
  2.4 ориентирован на события;
  2.5 однопоточный (код приложения исполняется только в одном потоке, один стек вызовов); 
  обычно в серверах для каждого соединения создается свой поток, в Node.js все соединения обрабатываются в одном JS-потоке;
  2.6 не блокирует выполнение кода при вводе/выводе (в файловой системе до 4х одновременно);
  2.7 в состав Node.js входят инструменты: 
    2.7.1 npm – пакетный менеджер;
    2.7.2 gyp - Python-генератор проектов; 
    2.7.3 gtest – Google фреймворк для тестирования С++ приложений;   
  2.8 использует библиотеки:
    2.8.1 V8 – библиотека V8 Engine, 
    2.8.2 libuv – библиотека для абстрагирования неблокирующих операций ввода/вывода; 
    2.8.3 http-parser – легковесный парсер http-сообщений (написан на C и не выполняет никаких системных вызовов);  
    2.8.4 c-ares  - библиотека для работы с DNS;                
    2.8.5 OpenSSL – библиотека для криптографии;  
    2.8.6 zlib – сжатие и распаковка.
     
     
18. Очерёдность выполнения колбэков
1.Очередь таймера(обработка задач, запланированных на setTimeout(), Setinterval())
2.Очередь ввода/вывода(чтение файлов,сетевые запросы, например модуль 'fs')
3.Очередь проверки(Выполнение задач, запланированных с помощью setImmediate())
4.Очередь микрозадач(Выполнение высокоприоритетных задач, связанных с промисами и другими микрозадачами)
  4.1 Process.nextTick() - тоже очередь(как подкатегория пункта 4). выполняет задачи , запланирванные с помощью process.nextTick()
  4.2 Очередь промисов - выполняет задачи, связанные с промисами
5. Очередь закрытия(Выполнение задач, связанных с завершением операций, например socket.on('close'))

Проядок обработки:
1 - Очередь микрозадач(пункт 4.1) - process.nextTick()
2 - Очередь микрозадач(пункт 4.2) - promise()
3 - Очередь таймера(пункт 1) - setTimeout(), setInterval()
4 - Очередь ввода/вывода(пункт 2) - чтение файлов,сетевые запросы, например модуль 'fs'
5 - Очередь проверки(пункт 3) - setImmediate()
6 - Очередь закрытия(пункт 5) - close()

